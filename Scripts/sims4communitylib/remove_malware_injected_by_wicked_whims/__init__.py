"""This script is intended to remove the malware injected by Turbodriver within Wicked Whims at runtime of The Sims 4. The malware Turbodriver attempts to inject using Wicked Whims, directly targets various mods, including Sims 4 Community Library and causes them to break randomly, in random places, and at random times, making it a particularly vicious malware."""
import sys
from xml.etree.ElementTree import Element

from sims4.localization import LocalizationHelperTuning
from sims4.tuning.serialization import ETreeClassCreator, ETreeTuningLoader
from sims4communitylib.utils.localization.common_localization_utils import CommonLocalizationUtils
from ui.ui_dialog import UiDialogOk
from ui.ui_dialog_notification import UiDialogNotification
from zone import Zone
import inspect
from functools import wraps
from typing import Any, Callable


class _DetectionCls:
    detected_and_removed_malware = False


def _inject_thing(target_object: Any, target_function_name: str, new_thing: Callable[..., Any]):
    def _function_wrapper(original_function, new_function: Callable[..., Any]) -> Any:
        @wraps(original_function)
        def _wrapped_function(*args, **kwargs) -> Any:
            if type(original_function) is property:
                return new_function(original_function.fget, *args, **kwargs)
            return new_function(original_function, *args, **kwargs)

        if inspect.ismethod(original_function):
            return classmethod(_wrapped_function)
        elif type(original_function) is property:
            return property(_wrapped_function)
        return _wrapped_function

    orig_function = getattr(target_object, str(target_function_name))
    setattr(target_object, str(target_function_name), _function_wrapper(orig_function, new_thing))


def _remove_malware_injected_by_wicked_whims(original, self: ETreeTuningLoader, node: Element, tunable_class):
    original_result = original(self, node, tunable_class)
    if 'animation_actors_behavior_data' in sys.modules:
        _DetectionCls.detected_and_removed_malware = True
        del sys.modules['animation_actors_behavior_data']
    if _DetectionCls.detected_and_removed_malware:
        return original_result

    def _remove_malware(_node: Element):
        malware_node: Element = _node.find('*[@n="animation_actors_behavior_data"]')
        if malware_node is not None:
            _DetectionCls.detected_and_removed_malware = True
            malware_node.clear()
        for sub_node in _node:
            _remove_malware(sub_node)

    # noinspection PyBroadException
    try:
        _remove_malware(node)
    except:
        pass
    return original_result


_inject_thing(ETreeTuningLoader, ETreeTuningLoader._load_node.__name__, _remove_malware_injected_by_wicked_whims)
_inject_thing(ETreeClassCreator, ETreeClassCreator._load_node.__name__, _remove_malware_injected_by_wicked_whims)


def _remove_malware_injected_by_wicked_whims(original, self: Zone, *_, **__):
    result = original(self, *_, **__)
    if 'animation_actors_behavior_data' in sys.modules:
        _DetectionCls.detected_and_removed_malware = True
        del sys.modules['animation_actors_behavior_data']
    if _DetectionCls.detected_and_removed_malware:
        title = 'ALERT: MALWARE INJECTION DETECTED!'
        text = 'MALWARE INJECTION BY A MOD WAS DETECTED!\n\nDETECTED IN MOD: Wicked Whims\nAUTHOR: Turbodriver\nCAUSE:\nMalicious code was found in a snippet tuning:\nproperty name: \'animation_actors_behavior_data\'.\n\nDESCRIPTION:\nThis malware is known to cause other mods to stop functioning properly in random places and at random times, it does this by replacing random functions of those mods with functions that return nothing and do nothing, which causes seemingly random failures to occur.\n\nS4CL WAS UNABLE TO PREVENT THIS MALWARE ATTACK, IT IS RECOMMENDED THAT YOU UNINSTALL Wicked Whims AND REPORT BOTH THE MOD (Wicked Whims) AND THE MOD AUTHOR (Turbodriver) TO THE PLACES IT IS HOSTED AT!'
        UiDialogOk.TunableFactory().default(
                None,
                title=lambda *_, **__: LocalizationHelperTuning.get_raw_text(title),
                text=lambda *_, **__: LocalizationHelperTuning.get_raw_text(text),
                text_ok=lambda *_, **__: CommonLocalizationUtils.create_localized_string(3648501874)
            ).show_dialog()
        UiDialogNotification.TunableFactory().default(
            None,
            title=lambda *args, **kwargs: LocalizationHelperTuning.get_raw_text(title),
            text=lambda *args, **kwargs: LocalizationHelperTuning.get_raw_text(text),
            visual_type=UiDialogNotification.UiDialogNotificationVisualType.INFORMATION,
            urgency=UiDialogNotification.UiDialogNotificationUrgency.URGENT,
            information_level=UiDialogNotification.UiDialogNotificationLevel.PLAYER,
            expand_behavior=UiDialogNotification.UiDialogNotificationExpandBehavior.FORCE_EXPAND
        ).show_dialog()
        _DetectionCls.detected_and_removed_malware = False
    return result


_inject_thing(Zone, Zone.update.__name__, _remove_malware_injected_by_wicked_whims)

# noinspection PyBroadException
try:
    # This property is used to inject code that is malicious. The code within it will replace the functions and classes of every module and namespace within those mods with ones that return None.
    # noinspection PyUnresolvedReferences
    from wickedwhims.sex.animations._ts4_animations_tuning import _WickedWhimsAnimationData
    del _WickedWhimsAnimationData.FACTORY_TUNABLES['animation_actors_behavior_data']
except:
    pass
